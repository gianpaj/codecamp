---
import { sentences as splitBySentences } from 'sbd';
import { Image, getImage } from 'astro:assets';
import { Icon } from 'astro-icon/components';

import FAQSection from '@components/FAQSection.astro';
import PricingTable from '@components/PricingTable.astro';
import Card from '@components/Card.astro';
import MeetTheTeachers from '@components/MeetTheTeachers.astro';
import Testimonials from '@components/Testimonials.astro';
import Base from '@layouts/Base.astro';

import { getLangFromUrl, useTranslations } from '@i18n/utils';
import getGithubEditUrl from '@utils/getGithubEditUrl';
import { getPublishedPostsByLang, getSortedPosts } from '@utils/blog';
import { languages } from '@i18n/i18n.config';
import { SITE } from '@config';

const womanBgDesktop = await getImage({ src: '/src/assets/woman-bg-desktop.webp', width: 1440, height: 720 });

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const recentPosts = getSortedPosts(await getPublishedPostsByLang(lang)).slice(0, 3);

export const getStaticPaths = () =>
  Object.keys(languages).map((lang) => ({
    params: { lang },
  }));

const techIcons = [
  { icon: 'bxl:javascript', title: 'JavaScript' },
  { icon: 'bxl:typescript', title: 'TypeScript' },
  { icon: 'bxl:html5', title: 'HTML5' },
  { icon: 'bxl:css3', title: 'CSS3' },
  // { icon: 'bxl:git', title: 'Git' },
  { icon: 'bxl:react', title: 'React' },
  // { icon: 'devicon-plain:nextjs', title: 'NextJS' },
  // { icon: 'bxl:tailwindcss', title: 'TailwindCSS' },
  // { icon: 'bxl:mongodb', title: 'MongoDB' },
  { icon: 'bxl:nodejs', title: 'NodeJS' },
  { icon: 'bxl:python', title: 'Python' },
  { icon: 'devicon-plain:raspberrypi', title: 'Raspberry Pi' },
];

const ogImage = SITE.ogImage.replace('en.jpg', lang + '.jpg');
---

<Base headProps={{ ogImage }} githubEditUrl={getGithubEditUrl('/src/pages/index.astro')}>
  <main class="relative w-full md:h-[calc(100vh-100px)] md:min-h-[700px]">
    <div class={`md:absolute inset-0 h-[${womanBgDesktop.attributes.height}px] sm:h-full w-full`}>
      <div class="hero-bg-gradient absolute inset-0 -z-10 h-full w-full opacity-70">
        <div class="wave"></div>
        <div class="wave"></div>
        <div class="wave"></div>
      </div>
      <div style={`background-image: url(${womanBgDesktop.src});`} class="hero-bg hidden md:block"></div>
      <Image
        src={'/src/assets/woman-bg-mobile.webp'}
        alt=""
        style={'margin-bottom: 0%;'}
        class="-mr-4 block h-full w-full object-cover object-top md:hidden"
        width={342}
        height={440}
      />
    </div>
    <div class="mx-auto max-w-[clamp(768px,100%,1536px)]">
      <div class="relative px-0 py-8 sm:px-4 md:py-20 lg:ml-8 lg:w-[60%]">
        <!-- prettier-ignore -->
        <h1
        class="my-5 whitespace-break-spaces text-left text-[2rem] font-bold leading-tight dark:text-[#e3e5e8] sm:my-0 sm:text-5xl sm:leading-none sm:tracking-tight"
        set:html={t('home.title')}></h1>
        <!-- prettier-ignore -->
        <h2 class="whitespace-break-spaces pt-8 text-left font-sans text-2xl leading-9 dark:text-[#e3e5e8] sm:text-xl sm:leading-8 sm:max-w-lg">{
          splitBySentences(t('home.subtitle')).map((s, i, a) =>
          i < a.length - 1 ? (
            <><span set:html={s}/><br /></>
          ) : (
            <span set:html={s}/>
          ),
        )
      }</h2>
        <div class={`mb-8 mt-8 grid grid-rows-2 sm:grid-rows-1 grid-flow-col gap-4 w-fit text-center`}>
          {techIcons.map(({ icon, title }) => <Icon title={title} name={icon} class="h-8 w-8" />)}
        </div>
      </div>
    </div>
  </main>
  <div class="px-6 py-8 lg:px-0 lg:pb-8 lg:pt-16">
    <Testimonials />
  </div>
  <div class="mx-auto max-w-screen-lg px-6 py-8 lg:px-0 lg:pb-8 lg:pt-16">
    <MeetTheTeachers />
  </div>
  {
    /* <div class="mx-auto max-w-screen-md text-center mb-8 lg:mb-12">
      <h2
        class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
      >
        Fill the form below to learn more
      </h2>
    </div>
    <Embed
      client:visible
      src="https://blocksurvey.io/survey/t/4c0715c3-e28d-4dc8-b80f-a3f8210f1f24"
      style={{ width: "100%", height: "100vh" }}
    /> */
  }
  <div class="px-6 pb-12 pt-4 sm:px-4 lg:py-12 xl:px-0">
    <PricingTable />
  </div>
  <div class="w-full bg-primary/10">
    <div class="mx-auto max-w-screen-md px-6 py-8 sm:px-4 lg:max-w-screen-md">
      <FAQSection />
    </div>
  </div>

  <div class="px-6 pt-8 lg:py-8 xl:px-0">
    <div class="mx-auto max-w-screen-xl font-sans">
      <h2 class="mb-4 text-center text-4xl font-extrabold tracking-tight text-gray-900 dark:text-white">
        {t('home.recentPosts')}
      </h2>
      <section
        class="grid grid-cols-1 gap-8 px-0 py-8 font-sans sm:gap-6 sm:px-16 lg:grid-cols-3 xl:px-0"
        data-test="articles-section"
      >
        {
          recentPosts.map(({ data, url }) => (
            <div class="col-span-1">
              <Card lang={lang} frontmatter={{ ...data, url }} />
            </div>
          ))
        }
      </section>
    </div>
  </div>
</Base>

<style scoped>
  main {
    margin: auto;
    padding: 1.5rem;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: rgba(var(--color-fill));
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }

  @media (min-width: 1024px) {
    .hero-bg {
      @apply absolute inset-0 -mr-4 h-full w-full bg-no-repeat object-cover object-top;
      background-position: right -100px center;
    }
  }
  /* inspired by <https://codepen.io/baarbaracrr/pen/KKovmGb> */
  .hero-bg-gradient {
    background: linear-gradient(
      90deg,
      rgba(125, 0, 102, 1) 0%,
      rgba(25, 0, 89, 1) 20%,
      rgba(25, 25, 90, 1) 40%,
      rgba(42, 140, 159, 1) 60%,
      rgba(247, 163, 10, 1) 80%,
      rgba(255, 148, 0, 1) 100%
    );
    background-size: 400% 400%;
    background-attachment: fixed;
    overflow: hidden;
  }
  html[data-theme='light'] .hero-bg-gradient {
    background: linear-gradient(
      90deg,
      rgb(245, 193, 210) 0%,
      rgb(206, 206, 238) 20%,
      rgb(181, 215, 233) 40%,
      #25b3b2 60%,
      rgb(244, 231, 171) 80%,
      rgb(243, 222, 129) 100%
    );
    background-size: 400% 400%;
    background-attachment: fixed;
  }
  @media (max-width: 768px) {
    .hero-bg-gradient {
      background: linear-gradient(
        120deg,
        rgba(125, 0, 102, 1) 0%,
        rgba(25, 0, 89, 1) 20%,
        rgba(25, 25, 90, 1) 40%,
        rgba(42, 140, 159, 1) 60%,
        rgba(247, 163, 10, 1) 80%,
        rgba(255, 148, 0, 1) 100%
      );

      background-size: 400% 400%;
      background-attachment: fixed;
    }
    html[data-theme='light'] .hero-bg-gradient {
      background: linear-gradient(
        30deg,
        rgb(245, 193, 210) 0%,
        rgb(206, 206, 238) 20%,
        rgb(181, 215, 233) 40%,
        #25b3b2 60%,
        rgb(244, 231, 171) 80%,
        rgb(243, 222, 129) 100%
      );
      background-size: 400% 400%;
      background-attachment: fixed;
    }
  }
  .wave {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 1000% 1000% 0 0;
    position: absolute;
    width: 200%;
    height: 20em;
    transform: translate3d(0, 0, 0);
    opacity: 0.8;
    bottom: -5em;
    left: 0;
    z-index: -1;
    overflow: hidden;
    animation: waveMove 10s reverse infinite;
  }
  .wave:nth-of-type(2) {
    bottom: -1.25em;
    opacity: 0.8;
    animation-duration: 18s;
    animation-delay: -3s;
  }

  .wave:nth-of-type(3) {
    bottom: -2.5em;
    opacity: 0.9;
    animation-duration: 20s;
    animation-delay: -6s;
  }

  @keyframes waveMove {
    2% {
      transform: translateX(1);
    }
    25% {
      transform: translateX(-25%);
    }
    50% {
      transform: translateX(-50%);
    }
    75% {
      transform: translateX(-25%);
    }
    100% {
      transform: translateX(1);
    }
  }
</style>
