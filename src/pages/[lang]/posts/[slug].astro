---
import { type CollectionEntry } from "astro:content";

import Layout from "@layouts/Base.astro";
import getReadingTime from "@utils/getReadingTime";
import getGithubEditUrl from "@utils/getGithubEditUrl";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { getPublishedPosts } from "@utils/blog";
import { SITE } from "@config";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getPublishedPosts() ;
  return posts.map((post) => {
    const [lang, ...slug] = post.slug.split("/");
    return {
      params: { lang, slug: slug.join("/") || undefined },
      props: { post },
    };
  });
}

const { slug } = Astro.params;
const { post } = Astro.props;

const {
  title: postTitle,
  author,
  ogImage,
  heroImage,
  publishDate,
  imageCaption,
  // tags,
} = post.data;
let { description } = post.data;

const { Content } = await post.render();

const readingTime = getReadingTime(post.body);

const ogUrl = new URL(ogImage ? ogImage : `${slug}.svg`, Astro.url.origin).href;

const seoTitle = `${postTitle} - ${SITE.seoTitle}`;
const maxDescription = 160;

// shorten with ellipsis without cutting off words
if (description.length > maxDescription) {
  const lastSpace = description.slice(0, maxDescription).lastIndexOf(" ");
  description = `${description.slice(0, lastSpace)}...`;
}
---

<Layout
  headProps={{
    seoTitle,
    description,
    ogImage: ogUrl,
    type: "article",
    publishDate,
    author,
  }}
  githubEditUrl={getGithubEditUrl("/src/pages/posts/[slug].astro")}
>
  <article class="prose mx-auto mb-4 mt-8 max-w-3xl px-3 sm:px-0">
    {heroImage && <img src={heroImage} alt={postTitle} />}
    {imageCaption && <span class="sr-only">{imageCaption}</span>}
    <h1 class="title">{postTitle}</h1>
    <div class="flex justify-between">
      {
        publishDate && (
          <time datetime={new Date(publishDate).toISOString()}>
            {new Date(publishDate).toLocaleDateString(lang, {
              year: "numeric",
              month: "short",
              day: "numeric",
            })}
          </time>
        )
      }
      <readingtime>{readingTime} {t('blog.minutesToRead')}</readingtime>
    </div>
    <hr />
    <Content />
    <!-- <ul class="tags-container">
      {tags.map(tag => <Tag name={tag} />)}
    </ul> -->
  </article>
</Layout>

<style>
  .title {
    font-size: 2em;
    margin: 0.25em 0 0;
  }
  hr {
    border-top: 1px solid #ddd;
    margin: 1rem 0;
  }
  time,
  readingtime {
    color: #a0a0a0;
  }
  html.dark time,
  html.dark readingtime {
    color: #9f9f9f;
  }
</style>
