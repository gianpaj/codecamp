---
import { getLangFromUrl, useTranslations } from '@i18n/utils';
import PricingFeature from './PricingFeature.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const plans = [
  {
    title: t('pricingtable.plan1.title'),
    price: 240,
    priceDescription: t('pricingtable.plan1.priceDescription'),
    link: '/book',
    buttonText: t('pricingtable.plan1.buttonText'),
    features: [
      {
        title: t('pricingtable.feature.online'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.feature.inPerson'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.feature.session'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.plan1.feature.course'),
        isAvailable: true,
      },
    ],
  },

  {
    title: t('pricingtable.plan2.title'),
    price: 450,
    popular: true,
    priceDescription: t('pricingtable.plan2.priceDescription'),
    link: '/book',
    buttonText: t('pricingtable.plan2.buttonText'),
    features: [
      {
        title: t('pricingtable.feature.online'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.feature.inPerson'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.feature.session'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.plan2.feature.course'),
        isAvailable: true,
      },
    ],
  },
  {
    title: t('pricingtable.plan3.title'),
    priceDescription: t('pricingtable.plan3.priceDescription'),
    link: '/book',
    buttonText: t('pricingtable.plan3.buttonText'),
    features: [
      {
        title: t('pricingtable.feature.online'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.feature.inPerson'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.plan3.feature.time'),
        isAvailable: true,
      },
      {
        title: t('pricingtable.plan3.feature.lunch'),
        isAvailable: true,
      },
    ],
  },
];
---

<div
  class="mx-auto grid max-w-screen-xl grid-cols-1 gap-x-10 gap-y-12 font-sans sm:grid-rows-[auto_auto_auto_auto] sm:gap-y-6 md:grid-cols-2 lg:grid-cols-3"
>
  {
    plans.map((plan) => (
      <div
        class={`${plan.popular ? 'border-2 border-pink-500' : ''} z-10 grid w-full max-w-sm grid-cols-subgrid gap-6 rounded-lg border border-gray-200 bg-white px-6 py-8 shadow dark:border-gray-700 dark:bg-gray-800 sm:row-span-full sm:grid-rows-subgrid sm:p-8`}
      >
        <h3 class="text-xl font-medium text-gray-500 dark:text-gray-400">{plan.title}</h3>
        <div class="flex items-baseline text-gray-900 dark:text-white">
          <span class="whitespace-pre-line text-3xl font-semibold">
            {!plan.price ? plan.priceDescription && <>{plan.priceDescription}</> : null}
          </span>
          <span class="text-5xl font-extrabold tracking-tight">
            <!-- no-prettier -->
            {plan.price}{Number.isInteger(plan.price)&& <span class="whitespace-pre-line text-3xl font-semibold">&euro;</span>}
          </span>
          {plan.price && plan.priceDescription && (
            <span class="text-l ml-1 whitespace-pre-line font-normal text-gray-500 dark:text-gray-400 sm:text-xl">
              {plan.priceDescription}
            </span>
          )}
        </div>
        <a
          href={plan.link.includes('@') ? `mailto:${plan.link}` : plan.link}
          class="button gradient-border dark:text-white"
        >
          {plan.buttonText}
        </a>
        {/* {renderFeatures(plan.features)} */}
        <PricingFeature features={plan.features} />
      </div>
    ))
  }
</div>

<style scoped>
  .gradient-border {
    position: relative;
    display: inline-block;
    cursor: pointer;
    outline: 0;
    white-space: nowrap;
    margin: 5px;
    padding: 0 26px;
    font-size: 16px;
    height: 46px;
    line-height: 46px;
    font-weight: 300;
    letter-spacing: 1px;
    background-color: rgb(243, 243, 243);
    border-radius: 3px;
    text-align: center;
    transition: all 0.075s;
  }

  .gradient-border:after {
    content: '';
    position: absolute;
    top: calc(-1 * 3px);
    left: calc(-1 * 3px);
    width: 0;
    height: 0;
    background: linear-gradient(60deg, #f79533, #f37055, #ef4e7b, #a166ab, #5073b8, #1098ad, #07b39b, #6fba82);
    border-radius: 3px;
    z-index: -1;
    animation: animatedgradient 1.5s ease alternate infinite;
    animation-play-state: paused;
    background-size: 300% 300%;
    transition: all 150ms;
  }

  .gradient-border:hover:after {
    animation-play-state: running;

    height: calc(100% + 3px * 2);
    width: calc(100% + 3px * 2);
  }

  @media screen and (max-width: 640px) {
    .gradient-border:after {
      height: calc(100% + 3px * 2);
      width: calc(100% + 3px * 2);
    }
  }

  @keyframes animatedgradient {
    0% {
      background-position-x: 0%;
    }

    100% {
      background-position-x: 100%;
    }
  }
</style>
<style is:global>
  :is(.dark) .button {
    background-color: rgb(15, 21, 28) !important;
  }
</style>
